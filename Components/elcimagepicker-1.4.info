{"Name":"ELCImagePicker","Id":3136,"Alias":"elcimagepicker","Description":"# ELCImagePicker\n\n*A clone of the UIImagePickerController using the Assets Library Framework allowing for multiple asset selection.*\n\n * Multi-select of images\n * Support for Xamarin.iOS Unified API\n * Returns UIImage, Name and Asset path of the selected items\n * TPL-friendly Interface\n * Localization support\n \n## Usage\n\nThe image picker is created and displayed in a very similar manner to the `UIImagePickerController`. The sample application  shows its use. To display the controller you instantiate it and display it modally like so.\n\n     var picker = ELCImagePickerViewController.Instance;\n     picker.MaximumImagesCount = 15;\n     picker.Completion.ContinueWith (t =\u003e {\n       if (t.IsCanceled || t.Exception != null) {\n         // no pictures for you!\n       } else {\n          var items = t.Result as List\u003cAssetResult\u003e;\n        }\n     });\n     \n     PresentViewController (picker, true, null);\n\nOriginally ported to C# by [bjdodson](https://github.com/bjdodson/XamarinSharpPlus)\n   \nPorted from Original Objective-C Project - [https://github.com/B-Sides/ELCImagePickerController](https://github.com/B-Sides/ELCImagePickerController)\n\n**iOS 10**\n\nPlease note that iOS 10 has changed the way that permission is granted to access the photo library.  You must add the new permissions requirements upfront in the info.plist file.\n\nXamarin has a blog post about these changes here -\u003e\n[New iOS 10 Privacy Permission Settings](https://blog.xamarin.com/new-ios-10-privacy-permission-settings/)","Version":"1.4","Summary":"A Multi-Image picker that uses the asset library","QuickStart":"# ELCImagePicker\n\n*A clone of the UIImagePickerController using the Assets Library Framework allowing for multiple asset selection.*\n \n## Usage\n\nThe image picker is created and displayed in a very similar manner to the `UIImagePickerController`. The sample application  shows its use. To display the controller you instantiate it and display it modally like so.\n\n     var picker = ELCImagePickerViewController.Create(15);\n     //picker.MaximumImagesCount = 15;\n     \n     picker.Completion.ContinueWith (t =\u003e {\n       if (t.IsCanceled || t.Exception != null) {\n         // no pictures for you!\n       } else {\n          var items = t.Result as List\u003cAssetResult\u003e;\n        }\n     });\n     \n     PresentViewController (picker, true, null);\n     \n\nThe `AssetResult` class has three properties \n\n * Name (String)\n * Path (String)\n * Image (UIImage)\n \nYou can use these to access the UIImage for the selected images and also the name and Asset Library path, for loading it later.\n  \n**iOS 10**\n\nPlease note that iOS 10 has changed the way that permission is granted to access the photo library.  You must add the new permissions requirements upfront in the info.plist file.\n\nXamarin has a blog post about these changes here -\u003e\n[New iOS 10 Privacy Permission Settings](https://blog.xamarin.com/new-ios-10-privacy-permission-settings/)\n\n**Customisation**\n\nYou can now override the default overlay image by setting the static `OverlayImage` property on the `ELCImagePickerViewController` class.  \n\nYou can additional specify custom titles for various elements in the Picker view by passing them too the `Create` method of `ELCImagePickerViewController`.\n\n     var picker = ELCImagePickerViewController.Create(15, \"Choisir un album\", \"Choisir Photo\", \"Retour\", \"choix Photo\");\n     //picker.MaximumImagesCount = 15;\n     \n     picker.Completion.ContinueWith (t =\u003e {\n       if (t.IsCanceled || t.Exception != null) {\n         // no pictures for you!\n       } else {\n          var items = t.Result as List\u003cAssetResult\u003e;\n        }\n     });\n     \n     PresentViewController (picker, true, null);\n     \t\n\t\n**Localisation**\n\nMost of the labels and strings support localisation.  The sample provides an english string file to use as the basis for implementing other languages.\n\nSimply create a folder in the resources folder within your iOS project which is prefixed with the ISO language code for the required language.  Create an empty file called \"Localizable.strings\" and then duplicate the keys for the english language and then replace the phrases with the localised versions.  \n\n\n**Deprecations**\n\nPlease not that the `Instance` property is now deprecated, use the `Create` method instead\n\n\n","Hash":"ff8c38c81686e9547446218dcb533b3c","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}